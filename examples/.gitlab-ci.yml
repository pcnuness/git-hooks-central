# Pipeline GitLab para valida√ß√£o pre-commit (backstop)
# Copie este arquivo para .gitlab-ci.yml e ajuste conforme necess√°rio

stages:
  - validate
  - test
  - build

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"

cache:
  paths:
    - .pip-cache/
    - .cache/pre-commit/

# Valida√ß√£o pre-commit (obrigat√≥ria para PRs)
pre-commit-validation:
  stage: validate
  image: python:3.11-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install pre-commit
    - pre-commit install --hook-type pre-push
  script:
    - echo "üîç Executando valida√ß√£o pre-commit..."
    - pre-commit run --all-files --hook-stage push -v
    - echo "‚úÖ Valida√ß√£o pre-commit conclu√≠da com sucesso"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false
  timeout: 10m

# Valida√ß√£o do artefato de auditoria (opcional)
validate-audit-artifact:
  stage: validate
  image: alpine:latest
  before_script:
    - apk add --no-cache jq
  script:
    - echo "üîç Validando artefato de auditoria..."
    - |
      if [ -f .git/hooks_artifacts/prepush.json ]; then
        echo "üìÑ Artefato encontrado:"
        cat .git/hooks_artifacts/prepush.json
        echo ""
        echo "üîç Validando estrutura do artefato..."
        jq -e '.commit and .author and .date and .precommit_config_sha1 and .status == "passed-local"' .git/hooks_artifacts/prepush.json
        echo "‚úÖ Artefato de auditoria v√°lido"
      else
        echo "‚ö†Ô∏è Artefato de auditoria n√£o encontrado"
        echo "‚ÑπÔ∏è Isso pode indicar que os hooks n√£o foram executados localmente"
        exit 1
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true  # Opcional, n√£o falha o pipeline
  timeout: 2m

# Testes da aplica√ß√£o
test:
  stage: test
  image: node:18-alpine  # Ajuste conforme sua stack
  script:
    - echo "üß™ Executando testes..."
    - npm ci
    - npm test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false

# Build da aplica√ß√£o
build:
  stage: build
  image: node:18-alpine  # Ajuste conforme sua stack
  script:
    - echo "üèóÔ∏è Executando build..."
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/
      - build/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false

# Job de seguran√ßa (execu√ß√£o completa de SAST)
security-scan:
  stage: test
  image: python:3.11-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install semgrep
  script:
    - echo "üîí Executando scan de seguran√ßa completo..."
    - semgrep ci --config p/owasp-top-ten --json --output semgrep-results.json
    - |
      if [ -s semgrep-results.json ]; then
        echo "‚ö†Ô∏è Problemas de seguran√ßa encontrados:"
        cat semgrep-results.json | jq '.results[] | "\(.check_id): \(.message) in \(.path):\(.start.line)"'
        exit 1
      else
        echo "‚úÖ Nenhum problema de seguran√ßa encontrado"
      fi
  artifacts:
    paths:
      - semgrep-results.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true  # N√£o falha o pipeline, mas gera relat√≥rio
  timeout: 15m
